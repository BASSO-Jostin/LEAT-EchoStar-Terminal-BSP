# See: https://arduino.github.io/arduino-cli/latest/platform-specification/

menu.pnum=Board part number

menu.xserial=U(S)ART support
menu.usb=USB support (if available)
menu.xusb=USB speed (if available)
menu.virtio=Virtual serial support

menu.opt=Optimize
menu.dbg=Debug symbols and core logs
menu.rtlib=C Runtime Library
menu.upload_method=Upload method

################################################################################

# EchoStar Term 6
EchoT6.name=EchoStar Term 6

EchoT6.build.core=arduino
EchoT6.build.board=GENERIC_WB5MMGHX
EchoT6.build.st_extra_flags=-D{build.product_line} {build.enable_usb} {build.xSerial}
EchoT6.build.mcu=cortex-m4
EchoT6.build.fpu=-mfpu=fpv4-sp-d16
EchoT6.build.float-abi=-mfloat-abi=hard
EchoT6.build.series=STM32WBxx
EchoT6.build.cmsis_lib_gcc=arm_cortexM4lf_math
EchoT6.build.flash_offset=0x0
EchoT6.build.product_line=STM32WB5Mxx
EchoT6.build.variant=variant_EchoT6
EchoT6.upload.maximum_size=827392
EchoT6.upload.maximum_data_size=196608

# Board part number
# EchoT6.menu.pnum.GENERIC_WB5MMGHX=Generic WB5MMGHx
# EchoT6.menu.pnum.GENERIC_WB5MMGHX.upload.maximum_size=827392
# EchoT6.menu.pnum.GENERIC_WB5MMGHX.upload.maximum_data_size=196608
# EchoT6.menu.pnum.GENERIC_WB5MMGHX.build.board=GENERIC_WB5MMGHX
# EchoT6.menu.pnum.GENERIC_WB5MMGHX.build.product_line=STM32WB5Mxx
# EchoT6.menu.pnum.GENERIC_WB5MMGHX.build.variant=STM32WBxx/WB5MMGH

# U(S)ART support
EchoT6.menu.xserial.generic=Enabled (generic 'Serial')
EchoT6.menu.xserial.none=Enabled (no generic 'Serial')
EchoT6.menu.xserial.none.build.xSerial=-DHAL_UART_MODULE_ENABLED -DHWSERIAL_NONE
EchoT6.menu.xserial.disabled=Disabled (no Serial support)
EchoT6.menu.xserial.disabled.build.xSerial=

# USB support (if available)
EchoT6.menu.usb.CDCgen=CDC (generic 'Serial' supersede U(S)ART)
EchoT6.menu.usb.CDCgen.build.enable_usb={build.usb_flags} -DUSBD_USE_CDC
EchoT6.menu.usb.CDC=CDC (no generic 'Serial')
EchoT6.menu.usb.CDC.build.enable_usb={build.usb_flags} -DUSBD_USE_CDC -DDISABLE_GENERIC_SERIALUSB
EchoT6.menu.usb.HID=HID (keyboard and mouse)
EchoT6.menu.usb.HID.build.enable_usb={build.usb_flags} -DUSBD_USE_HID_COMPOSITE
EchoT6.menu.usb.none=None

# USB speed (if available)
EchoT6.menu.xusb.FS=Low/Full Speed
EchoT6.menu.xusb.HS=High Speed
EchoT6.menu.xusb.HS.build.usb_speed=-DUSE_USB_HS
EchoT6.menu.xusb.HSFS=High Speed in Full Speed mode
EchoT6.menu.xusb.HSFS.build.usb_speed=-DUSE_USB_HS -DUSE_USB_HS_IN_FS

# Optimize
EchoT6.menu.opt.o3std=Fastest (-O3)
EchoT6.menu.opt.o3std.build.flags.optimize=-O3
EchoT6.menu.opt.o3lto=Fastest (-O3) with LTO
EchoT6.menu.opt.o3lto.build.flags.optimize=-O3 -flto
EchoT6.menu.opt.osstd=Smallest (-Os)
EchoT6.menu.opt.osstd.build.flags.optimize=-Os
EchoT6.menu.opt.oslto=Smallest (-Os) with LTO
EchoT6.menu.opt.oslto.build.flags.optimize=-Os -flto

# EchoT6.menu.opt.o1std=Fast (-O1)
# EchoT6.menu.opt.o1std.build.flags.optimize=-O1
# EchoT6.menu.opt.o1lto=Fast (-O1) with LTO
# EchoT6.menu.opt.o1lto.build.flags.optimize=-O1 -flto
# EchoT6.menu.opt.o2std=Faster (-O2)
# EchoT6.menu.opt.o2std.build.flags.optimize=-O2
# EchoT6.menu.opt.o2lto=Faster (-O2) with LTO
# EchoT6.menu.opt.o2lto.build.flags.optimize=-O2 -flto
# EchoT6.menu.opt.ogstd=Debug (-Og)
# EchoT6.menu.opt.ogstd.build.flags.optimize=-Og
# EchoT6.menu.opt.o0std=No Optimization (-O0)
# EchoT6.menu.opt.o0std.build.flags.optimize=-O0

# Debug symbols and core logs
EchoT6.menu.dbg.none=None
EchoT6.menu.dbg.enable_sym=Symbols Enabled (-g)
EchoT6.menu.dbg.enable_sym.build.flags.debug=-g -DNDEBUG
EchoT6.menu.dbg.enable_log=Core logs Enabled
EchoT6.menu.dbg.enable_log.build.flags.debug=
EchoT6.menu.dbg.enable_all=Core Logs and Symbols Enabled (-g)
EchoT6.menu.dbg.enable_all.build.flags.debug=-g

# C Runtime Library
EchoT6.menu.rtlib.nano=Newlib Nano (default)
EchoT6.menu.rtlib.nanofp=Newlib Nano + Float Printf
EchoT6.menu.rtlib.nanofp.build.flags.ldspecs=--specs=nano.specs -u _printf_float
EchoT6.menu.rtlib.nanofs=Newlib Nano + Float Scanf
EchoT6.menu.rtlib.nanofs.build.flags.ldspecs=--specs=nano.specs -u _scanf_float
EchoT6.menu.rtlib.nanofps=Newlib Nano + Float Printf/Scanf
EchoT6.menu.rtlib.nanofps.build.flags.ldspecs=--specs=nano.specs -u _printf_float -u _scanf_float
EchoT6.menu.rtlib.full=Newlib Standard
EchoT6.menu.rtlib.full.build.flags.ldspecs=

# Upload method
EchoT6.menu.upload_method.dfuMethod=STM32CubeProgrammer (DFU)
EchoT6.menu.upload_method.dfuMethod.upload.protocol=2
EchoT6.menu.upload_method.dfuMethod.upload.options=
EchoT6.menu.upload_method.dfuMethod.upload.tool=stm32CubeProg

EchoT6.menu.upload_method.swdMethod=STM32CubeProgrammer (SWD)
EchoT6.menu.upload_method.swdMethod.upload.protocol=0
EchoT6.menu.upload_method.swdMethod.upload.options=
EchoT6.menu.upload_method.swdMethod.upload.tool=stm32CubeProg

EchoT6.menu.upload_method.serialMethod=STM32CubeProgrammer (Serial)
EchoT6.menu.upload_method.serialMethod.upload.protocol=1
EchoT6.menu.upload_method.serialMethod.upload.options={serial.port.file}
EchoT6.menu.upload_method.serialMethod.upload.tool=stm32CubeProg